#!/usr/bin/env node

var pkg = require('../package.json');
var updateNotifier = require('update-notifier');
var program = require('commander');
var cli = require('../src');
var dropRight = require('lodash.dropright');
var zipObject = require('lodash.zipobject');
var forEach = require('lodash.foreach');

// Check for updates once a day
updateNotifier({pkg: pkg}).notify();

program.version(pkg.version);

/**
 * Builds command name by respecting optional/required arguments
 */
const buildCommandName = (actionName, args) => args.reduce(
  (cmd, arg) => cmd + (arg.required ? ` <${arg.name}>` : ` [${arg.name}]`),
  actionName
);

/**
 * Binds passed command line arguments to the ones defined by action,
 * e.g transforms ['d', 'folder', 'something'] to
 * {folderName: 'd', rnVersion: 'something'} etc.
 */
const bindCommandArgs = (args, passedArgs) => zipObject(
  args.map((arg, index) => {
    return [
      arg.property || arg.name,
      passedArgs[index]
    ];
  })
);

/**
 * Builds action from given action configuration and attaches it to commander
 */
const buildAction = (program, config, action, actionName) => {
  const commandName = buildCommandName(actionName, action.args || []);

  const cliAction = program
    .command(commandName)
    .usage(action.usage)
    .description(action.description)
    .action(function () {
      const args = bindCommandArgs(action.args, arguments);
      action.run(config, args, this.opts());
    });

  if (action.options) {
    action.options.forEach(option => cliAction.option(option.name, option.description));
  }
}

forEach(cli.actions, buildAction.bind(null, program, cli));

program.parse(process.argv);
