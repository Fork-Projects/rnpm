#!/usr/bin/env node

var pkg = require('../package.json');
var updateNotifier = require('update-notifier');
var program = require('commander');
var cli = require('../src');
var dropRight = require('lodash.dropright');

// Check for updates once a day
updateNotifier({pkg: pkg}).notify();

program.version(pkg.version);

/**
 * Builds command name by respecting optional/required arguments
 */
const buildCommandName = (actionName, args) => {
  if (!args) return actionName;

  return args
    .reduce((cmd, arg) => cmd + (arg.required ? ` <${arg.name}>` : ` [${arg.name}]`), actionName);
};

/**
 * Binds passed command line arguments to the ones defined by action,
 * e.g transforms ['d', 'folder', 'something'] to
 * {folderName: 'd', rnVersion: 'something'} etc.
 */
const bindCommandArgs = (args, passedArgs) => {
  var parsedArgs = {};
  passedArgs.forEach((passedArg, index) => {
    parsedArgs[args[index].property] = passedArg;
  });
  return parsedArgs;
};

Object.keys(cli.actions).forEach(actionName => {
  const action = cli.actions[actionName];
  const commandName = buildCommandName(actionName, action.args);

  const cliAction = program
    .command(commandName)
    .usage(action.usage)
    .description(action.description)
    .action(function() {
      // First argument to this function is `commander` itself. The rest are arguments.
      // equivalent to `{...passedArgs, commander}` kind of thing
      const passedArgs = dropRight(passedArgs, 1);
      const args = bindCommandArgs(action.args, passedArgs);
      action.run(cli, args, this.opts());
    });

  if (action.options) {
    action.options.forEach(option => cliAction.option(option.name, option.description));
  }
});

program.parse(process.argv);
