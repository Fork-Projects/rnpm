#!/usr/bin/env node

const pkg = require('../package.json');
const updateNotifier = require('update-notifier');
const program = require('commander');
const actions = require('../src/actions');
const dropRight = require('lodash.dropright');
const zipObject = require('lodash.zipobject');
const forEach = require('lodash.foreach');

// Check for updates once a day
updateNotifier({pkg: pkg}).notify();

program.version(pkg.version);

/**
 * Builds command name by respecting optional/required arguments
 */
const composeCommand = (actionName, args) => (args || []).reduce(
  (cmd, arg) => cmd + (arg.required ? ` <${arg.name}>` : ` [${arg.name}]`),
  actionName
);

/**
 * Maps passed command line arguments to the ones defined by action,
 * e.g transforms ['d', 'folder', 'something'] to
 * {folderName: 'd', rnVersion: 'something'}.
 */
const mapArgs = (args, passedArgs) => zipObject(
  (args || []).map((arg, index) => {
    return [
      arg.property || arg.name,
      passedArgs[index],
    ];
  })
);

/**
 * Builds action from given action configuration and attaches it to commander
 */
const buildAction = (action, actionName) => {
  const command = composeCommand(actionName, action.args);

  const cli = program
    .command(command)
    .usage(action.usage)
    .description(action.description)
    .action(function runAction() {
      const args = mapArgs(action.args, arguments);
      action.run(args, cli.opts());
    });

  if (action.options) {
    action.options.forEach(option => cli.option(option.name, option.description));
  }
};

forEach(actions, buildAction);

program.parse(process.argv);
